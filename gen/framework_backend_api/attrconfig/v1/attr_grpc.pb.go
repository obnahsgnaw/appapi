// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: framework_backend_api/attrconfig/v1/attr.proto

package attrconfigv1

import (
	context "context"
	v1 "github.com/obnahsgnaw/frameworkapi/gen/framework_backend_api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AttrConfigService_Paginate_FullMethodName = "/framework_backend_api.attrconfig.v1.AttrConfigService/Paginate"
	AttrConfigService_Refresh_FullMethodName  = "/framework_backend_api.attrconfig.v1.AttrConfigService/Refresh"
	AttrConfigService_Enable_FullMethodName   = "/framework_backend_api.attrconfig.v1.AttrConfigService/Enable"
	AttrConfigService_Disable_FullMethodName  = "/framework_backend_api.attrconfig.v1.AttrConfigService/Disable"
	AttrConfigService_Delete_FullMethodName   = "/framework_backend_api.attrconfig.v1.AttrConfigService/Delete"
)

// AttrConfigServiceClient is the client API for AttrConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttrConfigServiceClient interface {
	// 列表 展示所有配置的属性
	Paginate(ctx context.Context, in *v1.AttrConfigPaginateAllRequest, opts ...grpc.CallOption) (*v1.AttrConfigPaginateResponse, error)
	// 刷新
	Refresh(ctx context.Context, in *v1.AttrConfigRequest, opts ...grpc.CallOption) (*v1.AttrConfigData, error)
	// 启用
	Enable(ctx context.Context, in *v1.AttrConfigRequest, opts ...grpc.CallOption) (*v1.AttrConfigData, error)
	// 禁用
	Disable(ctx context.Context, in *v1.AttrConfigRequest, opts ...grpc.CallOption) (*v1.AttrConfigData, error)
	// 删除
	Delete(ctx context.Context, in *v1.AttrConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type attrConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttrConfigServiceClient(cc grpc.ClientConnInterface) AttrConfigServiceClient {
	return &attrConfigServiceClient{cc}
}

func (c *attrConfigServiceClient) Paginate(ctx context.Context, in *v1.AttrConfigPaginateAllRequest, opts ...grpc.CallOption) (*v1.AttrConfigPaginateResponse, error) {
	out := new(v1.AttrConfigPaginateResponse)
	err := c.cc.Invoke(ctx, AttrConfigService_Paginate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrConfigServiceClient) Refresh(ctx context.Context, in *v1.AttrConfigRequest, opts ...grpc.CallOption) (*v1.AttrConfigData, error) {
	out := new(v1.AttrConfigData)
	err := c.cc.Invoke(ctx, AttrConfigService_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrConfigServiceClient) Enable(ctx context.Context, in *v1.AttrConfigRequest, opts ...grpc.CallOption) (*v1.AttrConfigData, error) {
	out := new(v1.AttrConfigData)
	err := c.cc.Invoke(ctx, AttrConfigService_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrConfigServiceClient) Disable(ctx context.Context, in *v1.AttrConfigRequest, opts ...grpc.CallOption) (*v1.AttrConfigData, error) {
	out := new(v1.AttrConfigData)
	err := c.cc.Invoke(ctx, AttrConfigService_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrConfigServiceClient) Delete(ctx context.Context, in *v1.AttrConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AttrConfigService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttrConfigServiceServer is the server API for AttrConfigService service.
// All implementations should embed UnimplementedAttrConfigServiceServer
// for forward compatibility
type AttrConfigServiceServer interface {
	// 列表 展示所有配置的属性
	Paginate(context.Context, *v1.AttrConfigPaginateAllRequest) (*v1.AttrConfigPaginateResponse, error)
	// 刷新
	Refresh(context.Context, *v1.AttrConfigRequest) (*v1.AttrConfigData, error)
	// 启用
	Enable(context.Context, *v1.AttrConfigRequest) (*v1.AttrConfigData, error)
	// 禁用
	Disable(context.Context, *v1.AttrConfigRequest) (*v1.AttrConfigData, error)
	// 删除
	Delete(context.Context, *v1.AttrConfigRequest) (*emptypb.Empty, error)
}

// UnimplementedAttrConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAttrConfigServiceServer struct {
}

func (UnimplementedAttrConfigServiceServer) Paginate(context.Context, *v1.AttrConfigPaginateAllRequest) (*v1.AttrConfigPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedAttrConfigServiceServer) Refresh(context.Context, *v1.AttrConfigRequest) (*v1.AttrConfigData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAttrConfigServiceServer) Enable(context.Context, *v1.AttrConfigRequest) (*v1.AttrConfigData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedAttrConfigServiceServer) Disable(context.Context, *v1.AttrConfigRequest) (*v1.AttrConfigData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedAttrConfigServiceServer) Delete(context.Context, *v1.AttrConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeAttrConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttrConfigServiceServer will
// result in compilation errors.
type UnsafeAttrConfigServiceServer interface {
	mustEmbedUnimplementedAttrConfigServiceServer()
}

func RegisterAttrConfigServiceServer(s grpc.ServiceRegistrar, srv AttrConfigServiceServer) {
	s.RegisterService(&AttrConfigService_ServiceDesc, srv)
}

func _AttrConfigService_Paginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AttrConfigPaginateAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrConfigServiceServer).Paginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttrConfigService_Paginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrConfigServiceServer).Paginate(ctx, req.(*v1.AttrConfigPaginateAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrConfigService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AttrConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrConfigServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttrConfigService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrConfigServiceServer).Refresh(ctx, req.(*v1.AttrConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrConfigService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AttrConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrConfigServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttrConfigService_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrConfigServiceServer).Enable(ctx, req.(*v1.AttrConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrConfigService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AttrConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrConfigServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttrConfigService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrConfigServiceServer).Disable(ctx, req.(*v1.AttrConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AttrConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttrConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrConfigServiceServer).Delete(ctx, req.(*v1.AttrConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttrConfigService_ServiceDesc is the grpc.ServiceDesc for AttrConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttrConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "framework_backend_api.attrconfig.v1.AttrConfigService",
	HandlerType: (*AttrConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paginate",
			Handler:    _AttrConfigService_Paginate_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AttrConfigService_Refresh_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _AttrConfigService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _AttrConfigService_Disable_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AttrConfigService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "framework_backend_api/attrconfig/v1/attr.proto",
}
