// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app_backend_api/app/v1/map.proto

package appv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SampleApp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SampleApp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SampleApp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SampleAppMultiError, or nil
// if none found.
func (m *SampleApp) ValidateAll() error {
	return m.validate(true)
}

func (m *SampleApp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AppId

	// no validation rules for Name

	if len(errors) > 0 {
		return SampleAppMultiError(errors)
	}

	return nil
}

// SampleAppMultiError is an error wrapping multiple validation errors returned
// by SampleApp.ValidateAll() if the designated constraints aren't met.
type SampleAppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SampleAppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SampleAppMultiError) AllErrors() []error { return m }

// SampleAppValidationError is the validation error returned by
// SampleApp.Validate if the designated constraints aren't met.
type SampleAppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SampleAppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SampleAppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SampleAppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SampleAppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SampleAppValidationError) ErrorName() string { return "SampleAppValidationError" }

// Error satisfies the builtin error interface
func (e SampleAppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSampleApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SampleAppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SampleAppValidationError{}

// Validate checks the field values on IdsAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdsAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdsAppRequestMultiError, or
// nil if none found.
func (m *IdsAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WithDeleted

	if len(errors) > 0 {
		return IdsAppRequestMultiError(errors)
	}

	return nil
}

// IdsAppRequestMultiError is an error wrapping multiple validation errors
// returned by IdsAppRequest.ValidateAll() if the designated constraints
// aren't met.
type IdsAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsAppRequestMultiError) AllErrors() []error { return m }

// IdsAppRequestValidationError is the validation error returned by
// IdsAppRequest.Validate if the designated constraints aren't met.
type IdsAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsAppRequestValidationError) ErrorName() string { return "IdsAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdsAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsAppRequestValidationError{}

// Validate checks the field values on IdsAppResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdsAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdsAppResponseMultiError,
// or nil if none found.
func (m *IdsAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]uint32, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, IdsAppResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, IdsAppResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return IdsAppResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return IdsAppResponseMultiError(errors)
	}

	return nil
}

// IdsAppResponseMultiError is an error wrapping multiple validation errors
// returned by IdsAppResponse.ValidateAll() if the designated constraints
// aren't met.
type IdsAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsAppResponseMultiError) AllErrors() []error { return m }

// IdsAppResponseValidationError is the validation error returned by
// IdsAppResponse.Validate if the designated constraints aren't met.
type IdsAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsAppResponseValidationError) ErrorName() string { return "IdsAppResponseValidationError" }

// Error satisfies the builtin error interface
func (e IdsAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsAppResponseValidationError{}

// Validate checks the field values on LocalIdsAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LocalIdsAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocalIdsAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocalIdsAppRequestMultiError, or nil if none found.
func (m *LocalIdsAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LocalIdsAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WithDeleted

	if len(errors) > 0 {
		return LocalIdsAppRequestMultiError(errors)
	}

	return nil
}

// LocalIdsAppRequestMultiError is an error wrapping multiple validation errors
// returned by LocalIdsAppRequest.ValidateAll() if the designated constraints
// aren't met.
type LocalIdsAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocalIdsAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocalIdsAppRequestMultiError) AllErrors() []error { return m }

// LocalIdsAppRequestValidationError is the validation error returned by
// LocalIdsAppRequest.Validate if the designated constraints aren't met.
type LocalIdsAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalIdsAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalIdsAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalIdsAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalIdsAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalIdsAppRequestValidationError) ErrorName() string {
	return "LocalIdsAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LocalIdsAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalIdsAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalIdsAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalIdsAppRequestValidationError{}

// Validate checks the field values on LocalIdsAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LocalIdsAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocalIdsAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocalIdsAppResponseMultiError, or nil if none found.
func (m *LocalIdsAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LocalIdsAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetData()))
		i := 0
		for key := range m.GetData() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetData()[key]
			_ = val

			// no validation rules for Data[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, LocalIdsAppResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, LocalIdsAppResponseValidationError{
							field:  fmt.Sprintf("Data[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return LocalIdsAppResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return LocalIdsAppResponseMultiError(errors)
	}

	return nil
}

// LocalIdsAppResponseMultiError is an error wrapping multiple validation
// errors returned by LocalIdsAppResponse.ValidateAll() if the designated
// constraints aren't met.
type LocalIdsAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocalIdsAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocalIdsAppResponseMultiError) AllErrors() []error { return m }

// LocalIdsAppResponseValidationError is the validation error returned by
// LocalIdsAppResponse.Validate if the designated constraints aren't met.
type LocalIdsAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalIdsAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalIdsAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalIdsAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalIdsAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalIdsAppResponseValidationError) ErrorName() string {
	return "LocalIdsAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LocalIdsAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalIdsAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalIdsAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalIdsAppResponseValidationError{}
