// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/app/v1/edit.proto

package appv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppEditService_Create_FullMethodName = "/app_backend_api.app.v1.AppEditService/Create"
	AppEditService_Update_FullMethodName = "/app_backend_api.app.v1.AppEditService/Update"
	AppEditService_Delete_FullMethodName = "/app_backend_api.app.v1.AppEditService/Delete"
)

// AppEditServiceClient is the client API for AppEditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppEditServiceClient interface {
	// 创建
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*App, error)
	// 修改
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*App, error)
	// 删除
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appEditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppEditServiceClient(cc grpc.ClientConnInterface) AppEditServiceClient {
	return &appEditServiceClient{cc}
}

func (c *appEditServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppEditService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appEditServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppEditService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appEditServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppEditService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppEditServiceServer is the server API for AppEditService service.
// All implementations should embed UnimplementedAppEditServiceServer
// for forward compatibility
type AppEditServiceServer interface {
	// 创建
	Create(context.Context, *CreateRequest) (*App, error)
	// 修改
	Update(context.Context, *UpdateRequest) (*App, error)
	// 删除
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
}

// UnimplementedAppEditServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppEditServiceServer struct {
}

func (UnimplementedAppEditServiceServer) Create(context.Context, *CreateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppEditServiceServer) Update(context.Context, *UpdateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppEditServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeAppEditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppEditServiceServer will
// result in compilation errors.
type UnsafeAppEditServiceServer interface {
	mustEmbedUnimplementedAppEditServiceServer()
}

func RegisterAppEditServiceServer(s grpc.ServiceRegistrar, srv AppEditServiceServer) {
	s.RegisterService(&AppEditService_ServiceDesc, srv)
}

func _AppEditService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppEditServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppEditService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppEditServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppEditService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppEditServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppEditService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppEditServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppEditService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppEditServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppEditService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppEditServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppEditService_ServiceDesc is the grpc.ServiceDesc for AppEditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppEditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.app.v1.AppEditService",
	HandlerType: (*AppEditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppEditService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AppEditService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppEditService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/app/v1/edit.proto",
}
