// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app_backend_api/app/v1/edit.proto

package appv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AppCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppCreateRequestMultiError, or nil if none found.
func (m *AppCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := AppCreateRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppCreateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppCreateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppCreateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppCreateRequestMultiError(errors)
	}

	return nil
}

// AppCreateRequestMultiError is an error wrapping multiple validation errors
// returned by AppCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type AppCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppCreateRequestMultiError) AllErrors() []error { return m }

// AppCreateRequestValidationError is the validation error returned by
// AppCreateRequest.Validate if the designated constraints aren't met.
type AppCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppCreateRequestValidationError) ErrorName() string { return "AppCreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e AppCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppCreateRequestValidationError{}

// Validate checks the field values on AppCreateForm with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppCreateForm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppCreateForm with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppCreateFormMultiError, or
// nil if none found.
func (m *AppCreateForm) ValidateAll() error {
	return m.validate(true)
}

func (m *AppCreateForm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := AppCreateFormValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 0 || l > 255 {
		err := AppCreateFormValidationError{
			field:  "Description",
			reason: "value length must be between 0 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetScopes()) > 0 {

		_AppCreateForm_Scopes_Unique := make(map[string]struct{}, len(m.GetScopes()))

		for idx, item := range m.GetScopes() {
			_, _ = idx, item

			if _, exists := _AppCreateForm_Scopes_Unique[item]; exists {
				err := AppCreateFormValidationError{
					field:  fmt.Sprintf("Scopes[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_AppCreateForm_Scopes_Unique[item] = struct{}{}
			}

			if l := utf8.RuneCountInString(item); l < 1 || l > 100 {
				err := AppCreateFormValidationError{
					field:  fmt.Sprintf("Scopes[%v]", idx),
					reason: "value length must be between 1 and 100 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if _, ok := AppType_name[int32(m.GetType())]; !ok {
		err := AppCreateFormValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPackage()); l < 1 || l > 100 {
		err := AppCreateFormValidationError{
			field:  "Package",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 1 || l > 100 {
		err := AppCreateFormValidationError{
			field:  "Project",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Manage

	// no validation rules for Attrs

	if len(errors) > 0 {
		return AppCreateFormMultiError(errors)
	}

	return nil
}

// AppCreateFormMultiError is an error wrapping multiple validation errors
// returned by AppCreateForm.ValidateAll() if the designated constraints
// aren't met.
type AppCreateFormMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppCreateFormMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppCreateFormMultiError) AllErrors() []error { return m }

// AppCreateFormValidationError is the validation error returned by
// AppCreateForm.Validate if the designated constraints aren't met.
type AppCreateFormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppCreateFormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppCreateFormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppCreateFormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppCreateFormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppCreateFormValidationError) ErrorName() string { return "AppCreateFormValidationError" }

// Error satisfies the builtin error interface
func (e AppCreateFormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppCreateForm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppCreateFormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppCreateFormValidationError{}

// Validate checks the field values on AppUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppUpdateRequestMultiError, or nil if none found.
func (m *AppUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := AppUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetData() == nil {
		err := AppUpdateRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppUpdateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppUpdateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppUpdateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppUpdateRequestMultiError(errors)
	}

	return nil
}

// AppUpdateRequestMultiError is an error wrapping multiple validation errors
// returned by AppUpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type AppUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppUpdateRequestMultiError) AllErrors() []error { return m }

// AppUpdateRequestValidationError is the validation error returned by
// AppUpdateRequest.Validate if the designated constraints aren't met.
type AppUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppUpdateRequestValidationError) ErrorName() string { return "AppUpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e AppUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppUpdateRequestValidationError{}

// Validate checks the field values on AppUpdateForm with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppUpdateForm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppUpdateForm with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppUpdateFormMultiError, or
// nil if none found.
func (m *AppUpdateForm) ValidateAll() error {
	return m.validate(true)
}

func (m *AppUpdateForm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetName() != "" {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
			err := AppUpdateFormValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetDescription() != "" {

		if l := utf8.RuneCountInString(m.GetDescription()); l < 0 || l > 255 {
			err := AppUpdateFormValidationError{
				field:  "Description",
				reason: "value length must be between 0 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetScopes()) > 0 {

		_AppUpdateForm_Scopes_Unique := make(map[string]struct{}, len(m.GetScopes()))

		for idx, item := range m.GetScopes() {
			_, _ = idx, item

			if _, exists := _AppUpdateForm_Scopes_Unique[item]; exists {
				err := AppUpdateFormValidationError{
					field:  fmt.Sprintf("Scopes[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_AppUpdateForm_Scopes_Unique[item] = struct{}{}
			}

			if l := utf8.RuneCountInString(item); l < 1 || l > 100 {
				err := AppUpdateFormValidationError{
					field:  fmt.Sprintf("Scopes[%v]", idx),
					reason: "value length must be between 1 and 100 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if _, ok := AppType_name[int32(m.GetType())]; !ok {
		err := AppUpdateFormValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPackage() != "" {

		if l := utf8.RuneCountInString(m.GetPackage()); l < 1 || l > 100 {
			err := AppUpdateFormValidationError{
				field:  "Package",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetProject() != "" {

		if l := utf8.RuneCountInString(m.GetProject()); l < 1 || l > 100 {
			err := AppUpdateFormValidationError{
				field:  "Project",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Manage

	// no validation rules for Attrs

	if m.GetConflict() == nil {
		err := AppUpdateFormValidationError{
			field:  "Conflict",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConflict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppUpdateFormValidationError{
					field:  "Conflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppUpdateFormValidationError{
					field:  "Conflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConflict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppUpdateFormValidationError{
				field:  "Conflict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppUpdateFormMultiError(errors)
	}

	return nil
}

// AppUpdateFormMultiError is an error wrapping multiple validation errors
// returned by AppUpdateForm.ValidateAll() if the designated constraints
// aren't met.
type AppUpdateFormMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppUpdateFormMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppUpdateFormMultiError) AllErrors() []error { return m }

// AppUpdateFormValidationError is the validation error returned by
// AppUpdateForm.Validate if the designated constraints aren't met.
type AppUpdateFormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppUpdateFormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppUpdateFormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppUpdateFormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppUpdateFormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppUpdateFormValidationError) ErrorName() string { return "AppUpdateFormValidationError" }

// Error satisfies the builtin error interface
func (e AppUpdateFormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppUpdateForm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppUpdateFormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppUpdateFormValidationError{}

// Validate checks the field values on AppDeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppDeleteRequestMultiError, or nil if none found.
func (m *AppDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 24 {
		err := AppDeleteRequestValidationError{
			field:  "Id",
			reason: "value length must be 24 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return AppDeleteRequestMultiError(errors)
	}

	return nil
}

// AppDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by AppDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type AppDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppDeleteRequestMultiError) AllErrors() []error { return m }

// AppDeleteRequestValidationError is the validation error returned by
// AppDeleteRequest.Validate if the designated constraints aren't met.
type AppDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppDeleteRequestValidationError) ErrorName() string { return "AppDeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e AppDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppDeleteRequestValidationError{}
