// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/app/v1/version.proto

package appv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppVersionService_Paginate_FullMethodName = "/app_backend_api.app.v1.AppVersionService/Paginate"
	AppVersionService_Detail_FullMethodName   = "/app_backend_api.app.v1.AppVersionService/Detail"
	AppVersionService_Create_FullMethodName   = "/app_backend_api.app.v1.AppVersionService/Create"
	AppVersionService_Update_FullMethodName   = "/app_backend_api.app.v1.AppVersionService/Update"
	AppVersionService_Delete_FullMethodName   = "/app_backend_api.app.v1.AppVersionService/Delete"
	AppVersionService_Publish_FullMethodName  = "/app_backend_api.app.v1.AppVersionService/Publish"
)

// AppVersionServiceClient is the client API for AppVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppVersionServiceClient interface {
	// 列表
	Paginate(ctx context.Context, in *AppVersionPaginateRequest, opts ...grpc.CallOption) (*AppVersionPaginateResponse, error)
	// 详情
	Detail(ctx context.Context, in *AppVersionDetailRequest, opts ...grpc.CallOption) (*AppVersion, error)
	// 创建
	Create(ctx context.Context, in *AppVersionCreateRequest, opts ...grpc.CallOption) (*AppVersion, error)
	// 修改
	Update(ctx context.Context, in *AppVersionUpdateRequest, opts ...grpc.CallOption) (*AppVersion, error)
	// 删除
	Delete(ctx context.Context, in *AppVersionDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发布
	Publish(ctx context.Context, in *AppVersionPublishRequest, opts ...grpc.CallOption) (*AppVersion, error)
}

type appVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppVersionServiceClient(cc grpc.ClientConnInterface) AppVersionServiceClient {
	return &appVersionServiceClient{cc}
}

func (c *appVersionServiceClient) Paginate(ctx context.Context, in *AppVersionPaginateRequest, opts ...grpc.CallOption) (*AppVersionPaginateResponse, error) {
	out := new(AppVersionPaginateResponse)
	err := c.cc.Invoke(ctx, AppVersionService_Paginate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) Detail(ctx context.Context, in *AppVersionDetailRequest, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, AppVersionService_Detail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) Create(ctx context.Context, in *AppVersionCreateRequest, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, AppVersionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) Update(ctx context.Context, in *AppVersionUpdateRequest, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, AppVersionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) Delete(ctx context.Context, in *AppVersionDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppVersionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionServiceClient) Publish(ctx context.Context, in *AppVersionPublishRequest, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, AppVersionService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppVersionServiceServer is the server API for AppVersionService service.
// All implementations should embed UnimplementedAppVersionServiceServer
// for forward compatibility
type AppVersionServiceServer interface {
	// 列表
	Paginate(context.Context, *AppVersionPaginateRequest) (*AppVersionPaginateResponse, error)
	// 详情
	Detail(context.Context, *AppVersionDetailRequest) (*AppVersion, error)
	// 创建
	Create(context.Context, *AppVersionCreateRequest) (*AppVersion, error)
	// 修改
	Update(context.Context, *AppVersionUpdateRequest) (*AppVersion, error)
	// 删除
	Delete(context.Context, *AppVersionDeleteRequest) (*emptypb.Empty, error)
	// 发布
	Publish(context.Context, *AppVersionPublishRequest) (*AppVersion, error)
}

// UnimplementedAppVersionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppVersionServiceServer struct {
}

func (UnimplementedAppVersionServiceServer) Paginate(context.Context, *AppVersionPaginateRequest) (*AppVersionPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedAppVersionServiceServer) Detail(context.Context, *AppVersionDetailRequest) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedAppVersionServiceServer) Create(context.Context, *AppVersionCreateRequest) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppVersionServiceServer) Update(context.Context, *AppVersionUpdateRequest) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppVersionServiceServer) Delete(context.Context, *AppVersionDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppVersionServiceServer) Publish(context.Context, *AppVersionPublishRequest) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

// UnsafeAppVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppVersionServiceServer will
// result in compilation errors.
type UnsafeAppVersionServiceServer interface {
	mustEmbedUnimplementedAppVersionServiceServer()
}

func RegisterAppVersionServiceServer(s grpc.ServiceRegistrar, srv AppVersionServiceServer) {
	s.RegisterService(&AppVersionService_ServiceDesc, srv)
}

func _AppVersionService_Paginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionPaginateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).Paginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_Paginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).Paginate(ctx, req.(*AppVersionPaginateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).Detail(ctx, req.(*AppVersionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).Create(ctx, req.(*AppVersionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).Update(ctx, req.(*AppVersionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).Delete(ctx, req.(*AppVersionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionServiceServer).Publish(ctx, req.(*AppVersionPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppVersionService_ServiceDesc is the grpc.ServiceDesc for AppVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.app.v1.AppVersionService",
	HandlerType: (*AppVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paginate",
			Handler:    _AppVersionService_Paginate_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _AppVersionService_Detail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AppVersionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AppVersionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppVersionService_Delete_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _AppVersionService_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/app/v1/version.proto",
}
