// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/app/v1/query.proto

package appv1

import (
	context "context"
	v1 "github.com/obnahsgnaw/appapi/gen/app_backend_api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppQueryService_Paginate_FullMethodName  = "/app_backend_api.app.v1.AppQueryService/Paginate"
	AppQueryService_IdDetail_FullMethodName  = "/app_backend_api.app.v1.AppQueryService/IdDetail"
	AppQueryService_IdsDetail_FullMethodName = "/app_backend_api.app.v1.AppQueryService/IdsDetail"
	AppQueryService_IdsSimple_FullMethodName = "/app_backend_api.app.v1.AppQueryService/IdsSimple"
	AppQueryService_Config_FullMethodName    = "/app_backend_api.app.v1.AppQueryService/Config"
)

// AppQueryServiceClient is the client API for AppQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppQueryServiceClient interface {
	// 列表
	Paginate(ctx context.Context, in *v1.PaginateRequest, opts ...grpc.CallOption) (*AppPaginateResponse, error)
	// 单ID详情
	IdDetail(ctx context.Context, in *AppIdRequest, opts ...grpc.CallOption) (*App, error)
	// 多ID详情
	IdsDetail(ctx context.Context, in *AppIdsRequest, opts ...grpc.CallOption) (*AppIdsResponse, error)
	// 多ID简单详情
	IdsSimple(ctx context.Context, in *AppIdsRequest, opts ...grpc.CallOption) (*AppIdsSimpleResponse, error)
	// 属性配置
	Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type appQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppQueryServiceClient(cc grpc.ClientConnInterface) AppQueryServiceClient {
	return &appQueryServiceClient{cc}
}

func (c *appQueryServiceClient) Paginate(ctx context.Context, in *v1.PaginateRequest, opts ...grpc.CallOption) (*AppPaginateResponse, error) {
	out := new(AppPaginateResponse)
	err := c.cc.Invoke(ctx, AppQueryService_Paginate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appQueryServiceClient) IdDetail(ctx context.Context, in *AppIdRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppQueryService_IdDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appQueryServiceClient) IdsDetail(ctx context.Context, in *AppIdsRequest, opts ...grpc.CallOption) (*AppIdsResponse, error) {
	out := new(AppIdsResponse)
	err := c.cc.Invoke(ctx, AppQueryService_IdsDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appQueryServiceClient) IdsSimple(ctx context.Context, in *AppIdsRequest, opts ...grpc.CallOption) (*AppIdsSimpleResponse, error) {
	out := new(AppIdsSimpleResponse)
	err := c.cc.Invoke(ctx, AppQueryService_IdsSimple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appQueryServiceClient) Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, AppQueryService_Config_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppQueryServiceServer is the server API for AppQueryService service.
// All implementations should embed UnimplementedAppQueryServiceServer
// for forward compatibility
type AppQueryServiceServer interface {
	// 列表
	Paginate(context.Context, *v1.PaginateRequest) (*AppPaginateResponse, error)
	// 单ID详情
	IdDetail(context.Context, *AppIdRequest) (*App, error)
	// 多ID详情
	IdsDetail(context.Context, *AppIdsRequest) (*AppIdsResponse, error)
	// 多ID简单详情
	IdsSimple(context.Context, *AppIdsRequest) (*AppIdsSimpleResponse, error)
	// 属性配置
	Config(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

// UnimplementedAppQueryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppQueryServiceServer struct {
}

func (UnimplementedAppQueryServiceServer) Paginate(context.Context, *v1.PaginateRequest) (*AppPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedAppQueryServiceServer) IdDetail(context.Context, *AppIdRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdDetail not implemented")
}
func (UnimplementedAppQueryServiceServer) IdsDetail(context.Context, *AppIdsRequest) (*AppIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdsDetail not implemented")
}
func (UnimplementedAppQueryServiceServer) IdsSimple(context.Context, *AppIdsRequest) (*AppIdsSimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdsSimple not implemented")
}
func (UnimplementedAppQueryServiceServer) Config(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}

// UnsafeAppQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppQueryServiceServer will
// result in compilation errors.
type UnsafeAppQueryServiceServer interface {
	mustEmbedUnimplementedAppQueryServiceServer()
}

func RegisterAppQueryServiceServer(s grpc.ServiceRegistrar, srv AppQueryServiceServer) {
	s.RegisterService(&AppQueryService_ServiceDesc, srv)
}

func _AppQueryService_Paginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PaginateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppQueryServiceServer).Paginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppQueryService_Paginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppQueryServiceServer).Paginate(ctx, req.(*v1.PaginateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppQueryService_IdDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppQueryServiceServer).IdDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppQueryService_IdDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppQueryServiceServer).IdDetail(ctx, req.(*AppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppQueryService_IdsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppQueryServiceServer).IdsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppQueryService_IdsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppQueryServiceServer).IdsDetail(ctx, req.(*AppIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppQueryService_IdsSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppQueryServiceServer).IdsSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppQueryService_IdsSimple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppQueryServiceServer).IdsSimple(ctx, req.(*AppIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppQueryService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppQueryServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppQueryService_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppQueryServiceServer).Config(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppQueryService_ServiceDesc is the grpc.ServiceDesc for AppQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.app.v1.AppQueryService",
	HandlerType: (*AppQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paginate",
			Handler:    _AppQueryService_Paginate_Handler,
		},
		{
			MethodName: "IdDetail",
			Handler:    _AppQueryService_IdDetail_Handler,
		},
		{
			MethodName: "IdsDetail",
			Handler:    _AppQueryService_IdsDetail_Handler,
		},
		{
			MethodName: "IdsSimple",
			Handler:    _AppQueryService_IdsSimple_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _AppQueryService_Config_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/app/v1/query.proto",
}
