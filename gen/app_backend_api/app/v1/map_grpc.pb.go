// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/app/v1/map.proto

package appv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MapAppService_IdsApp_FullMethodName      = "/app_backend_api.app.v1.MapAppService/IdsApp"
	MapAppService_LocalIdsApp_FullMethodName = "/app_backend_api.app.v1.MapAppService/LocalIdsApp"
)

// MapAppServiceClient is the client API for MapAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapAppServiceClient interface {
	IdsApp(ctx context.Context, in *IdsAppRequest, opts ...grpc.CallOption) (*IdsAppResponse, error)
	LocalIdsApp(ctx context.Context, in *LocalIdsAppRequest, opts ...grpc.CallOption) (*LocalIdsAppResponse, error)
}

type mapAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapAppServiceClient(cc grpc.ClientConnInterface) MapAppServiceClient {
	return &mapAppServiceClient{cc}
}

func (c *mapAppServiceClient) IdsApp(ctx context.Context, in *IdsAppRequest, opts ...grpc.CallOption) (*IdsAppResponse, error) {
	out := new(IdsAppResponse)
	err := c.cc.Invoke(ctx, MapAppService_IdsApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapAppServiceClient) LocalIdsApp(ctx context.Context, in *LocalIdsAppRequest, opts ...grpc.CallOption) (*LocalIdsAppResponse, error) {
	out := new(LocalIdsAppResponse)
	err := c.cc.Invoke(ctx, MapAppService_LocalIdsApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapAppServiceServer is the server API for MapAppService service.
// All implementations should embed UnimplementedMapAppServiceServer
// for forward compatibility
type MapAppServiceServer interface {
	IdsApp(context.Context, *IdsAppRequest) (*IdsAppResponse, error)
	LocalIdsApp(context.Context, *LocalIdsAppRequest) (*LocalIdsAppResponse, error)
}

// UnimplementedMapAppServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMapAppServiceServer struct {
}

func (UnimplementedMapAppServiceServer) IdsApp(context.Context, *IdsAppRequest) (*IdsAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdsApp not implemented")
}
func (UnimplementedMapAppServiceServer) LocalIdsApp(context.Context, *LocalIdsAppRequest) (*LocalIdsAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalIdsApp not implemented")
}

// UnsafeMapAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapAppServiceServer will
// result in compilation errors.
type UnsafeMapAppServiceServer interface {
	mustEmbedUnimplementedMapAppServiceServer()
}

func RegisterMapAppServiceServer(s grpc.ServiceRegistrar, srv MapAppServiceServer) {
	s.RegisterService(&MapAppService_ServiceDesc, srv)
}

func _MapAppService_IdsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapAppServiceServer).IdsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapAppService_IdsApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapAppServiceServer).IdsApp(ctx, req.(*IdsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapAppService_LocalIdsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalIdsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapAppServiceServer).LocalIdsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MapAppService_LocalIdsApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapAppServiceServer).LocalIdsApp(ctx, req.(*LocalIdsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapAppService_ServiceDesc is the grpc.ServiceDesc for MapAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.app.v1.MapAppService",
	HandlerType: (*MapAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IdsApp",
			Handler:    _MapAppService_IdsApp_Handler,
		},
		{
			MethodName: "LocalIdsApp",
			Handler:    _MapAppService_LocalIdsApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/app/v1/map.proto",
}
