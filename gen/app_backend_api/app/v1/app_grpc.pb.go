// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/app/v1/app.proto

package appv1

import (
	context "context"
	v1 "github.com/obnahsgnaw/appapi/gen/app_backend_api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppService_Paginate_FullMethodName = "/app_backend_api.app.v1.AppService/Paginate"
	AppService_Detail_FullMethodName   = "/app_backend_api.app.v1.AppService/Detail"
	AppService_Create_FullMethodName   = "/app_backend_api.app.v1.AppService/Create"
	AppService_Update_FullMethodName   = "/app_backend_api.app.v1.AppService/Update"
	AppService_Delete_FullMethodName   = "/app_backend_api.app.v1.AppService/Delete"
	AppService_Disable_FullMethodName  = "/app_backend_api.app.v1.AppService/Disable"
	AppService_Enable_FullMethodName   = "/app_backend_api.app.v1.AppService/Enable"
	AppService_Config_FullMethodName   = "/app_backend_api.app.v1.AppService/Config"
)

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	// 列表
	Paginate(ctx context.Context, in *v1.PaginateRequest, opts ...grpc.CallOption) (*AppPaginateResponse, error)
	// 详情
	Detail(ctx context.Context, in *v1.IntIdRequest, opts ...grpc.CallOption) (*App, error)
	// 创建
	Create(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*App, error)
	// 修改
	Update(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*App, error)
	// 删除
	Delete(ctx context.Context, in *v1.IntIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁用
	Disable(ctx context.Context, in *v1.IntIdOperateRequest, opts ...grpc.CallOption) (*App, error)
	// 启用
	Enable(ctx context.Context, in *v1.IntIdOperateRequest, opts ...grpc.CallOption) (*App, error)
	// 属性配置
	Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) Paginate(ctx context.Context, in *v1.PaginateRequest, opts ...grpc.CallOption) (*AppPaginateResponse, error) {
	out := new(AppPaginateResponse)
	err := c.cc.Invoke(ctx, AppService_Paginate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) Detail(ctx context.Context, in *v1.IntIdRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppService_Detail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) Create(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) Update(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) Delete(ctx context.Context, in *v1.IntIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) Disable(ctx context.Context, in *v1.IntIdOperateRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppService_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) Enable(ctx context.Context, in *v1.IntIdOperateRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppService_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, AppService_Config_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations should embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	// 列表
	Paginate(context.Context, *v1.PaginateRequest) (*AppPaginateResponse, error)
	// 详情
	Detail(context.Context, *v1.IntIdRequest) (*App, error)
	// 创建
	Create(context.Context, *AppCreateRequest) (*App, error)
	// 修改
	Update(context.Context, *AppUpdateRequest) (*App, error)
	// 删除
	Delete(context.Context, *v1.IntIdRequest) (*emptypb.Empty, error)
	// 禁用
	Disable(context.Context, *v1.IntIdOperateRequest) (*App, error)
	// 启用
	Enable(context.Context, *v1.IntIdOperateRequest) (*App, error)
	// 属性配置
	Config(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

// UnimplementedAppServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) Paginate(context.Context, *v1.PaginateRequest) (*AppPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedAppServiceServer) Detail(context.Context, *v1.IntIdRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedAppServiceServer) Create(context.Context, *AppCreateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppServiceServer) Update(context.Context, *AppUpdateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppServiceServer) Delete(context.Context, *v1.IntIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppServiceServer) Disable(context.Context, *v1.IntIdOperateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedAppServiceServer) Enable(context.Context, *v1.IntIdOperateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedAppServiceServer) Config(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_Paginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PaginateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Paginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Paginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Paginate(ctx, req.(*v1.PaginateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IntIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Detail(ctx, req.(*v1.IntIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Create(ctx, req.(*AppCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Update(ctx, req.(*AppUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IntIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Delete(ctx, req.(*v1.IntIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IntIdOperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Disable(ctx, req.(*v1.IntIdOperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IntIdOperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Enable(ctx, req.(*v1.IntIdOperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Config(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.app.v1.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paginate",
			Handler:    _AppService_Paginate_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _AppService_Detail_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AppService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AppService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppService_Delete_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _AppService_Disable_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _AppService_Enable_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _AppService_Config_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/app/v1/app.proto",
}
