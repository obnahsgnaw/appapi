// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/app/v1/enabledquery.proto

package appv1

import (
	context "context"
	v1 "github.com/obnahsgnaw/appapi/gen/app_backend_api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnabledAppQueryService_Paginate_FullMethodName = "/app_backend_api.app.v1.EnabledAppQueryService/Paginate"
)

// EnabledAppQueryServiceClient is the client API for EnabledAppQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnabledAppQueryServiceClient interface {
	// 列表
	Paginate(ctx context.Context, in *v1.PaginateAllRequest, opts ...grpc.CallOption) (*EnabledAppPaginateResponse, error)
}

type enabledAppQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnabledAppQueryServiceClient(cc grpc.ClientConnInterface) EnabledAppQueryServiceClient {
	return &enabledAppQueryServiceClient{cc}
}

func (c *enabledAppQueryServiceClient) Paginate(ctx context.Context, in *v1.PaginateAllRequest, opts ...grpc.CallOption) (*EnabledAppPaginateResponse, error) {
	out := new(EnabledAppPaginateResponse)
	err := c.cc.Invoke(ctx, EnabledAppQueryService_Paginate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnabledAppQueryServiceServer is the server API for EnabledAppQueryService service.
// All implementations should embed UnimplementedEnabledAppQueryServiceServer
// for forward compatibility
type EnabledAppQueryServiceServer interface {
	// 列表
	Paginate(context.Context, *v1.PaginateAllRequest) (*EnabledAppPaginateResponse, error)
}

// UnimplementedEnabledAppQueryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEnabledAppQueryServiceServer struct {
}

func (UnimplementedEnabledAppQueryServiceServer) Paginate(context.Context, *v1.PaginateAllRequest) (*EnabledAppPaginateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}

// UnsafeEnabledAppQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnabledAppQueryServiceServer will
// result in compilation errors.
type UnsafeEnabledAppQueryServiceServer interface {
	mustEmbedUnimplementedEnabledAppQueryServiceServer()
}

func RegisterEnabledAppQueryServiceServer(s grpc.ServiceRegistrar, srv EnabledAppQueryServiceServer) {
	s.RegisterService(&EnabledAppQueryService_ServiceDesc, srv)
}

func _EnabledAppQueryService_Paginate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PaginateAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnabledAppQueryServiceServer).Paginate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnabledAppQueryService_Paginate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnabledAppQueryServiceServer).Paginate(ctx, req.(*v1.PaginateAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnabledAppQueryService_ServiceDesc is the grpc.ServiceDesc for EnabledAppQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnabledAppQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.app.v1.EnabledAppQueryService",
	HandlerType: (*EnabledAppQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paginate",
			Handler:    _EnabledAppQueryService_Paginate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/app/v1/enabledquery.proto",
}
