// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/app/v1/endisable.proto

package appv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppEnableDisableService_Enable_FullMethodName  = "/app_backend_api.app.v1.AppEnableDisableService/Enable"
	AppEnableDisableService_Disable_FullMethodName = "/app_backend_api.app.v1.AppEnableDisableService/Disable"
)

// AppEnableDisableServiceClient is the client API for AppEnableDisableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppEnableDisableServiceClient interface {
	// 启用
	Enable(ctx context.Context, in *AppIdOperateRequest, opts ...grpc.CallOption) (*App, error)
	// 禁用
	Disable(ctx context.Context, in *AppIdOperateRequest, opts ...grpc.CallOption) (*App, error)
}

type appEnableDisableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppEnableDisableServiceClient(cc grpc.ClientConnInterface) AppEnableDisableServiceClient {
	return &appEnableDisableServiceClient{cc}
}

func (c *appEnableDisableServiceClient) Enable(ctx context.Context, in *AppIdOperateRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppEnableDisableService_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appEnableDisableServiceClient) Disable(ctx context.Context, in *AppIdOperateRequest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := c.cc.Invoke(ctx, AppEnableDisableService_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppEnableDisableServiceServer is the server API for AppEnableDisableService service.
// All implementations should embed UnimplementedAppEnableDisableServiceServer
// for forward compatibility
type AppEnableDisableServiceServer interface {
	// 启用
	Enable(context.Context, *AppIdOperateRequest) (*App, error)
	// 禁用
	Disable(context.Context, *AppIdOperateRequest) (*App, error)
}

// UnimplementedAppEnableDisableServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppEnableDisableServiceServer struct {
}

func (UnimplementedAppEnableDisableServiceServer) Enable(context.Context, *AppIdOperateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedAppEnableDisableServiceServer) Disable(context.Context, *AppIdOperateRequest) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}

// UnsafeAppEnableDisableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppEnableDisableServiceServer will
// result in compilation errors.
type UnsafeAppEnableDisableServiceServer interface {
	mustEmbedUnimplementedAppEnableDisableServiceServer()
}

func RegisterAppEnableDisableServiceServer(s grpc.ServiceRegistrar, srv AppEnableDisableServiceServer) {
	s.RegisterService(&AppEnableDisableService_ServiceDesc, srv)
}

func _AppEnableDisableService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdOperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppEnableDisableServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppEnableDisableService_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppEnableDisableServiceServer).Enable(ctx, req.(*AppIdOperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppEnableDisableService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdOperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppEnableDisableServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppEnableDisableService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppEnableDisableServiceServer).Disable(ctx, req.(*AppIdOperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppEnableDisableService_ServiceDesc is the grpc.ServiceDesc for AppEnableDisableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppEnableDisableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.app.v1.AppEnableDisableService",
	HandlerType: (*AppEnableDisableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enable",
			Handler:    _AppEnableDisableService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _AppEnableDisableService_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/app/v1/endisable.proto",
}
