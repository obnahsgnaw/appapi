// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/appversion/v1/edit.proto

package appversionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppVersionEditService_Create_FullMethodName = "/app_backend_api.appversion.v1.AppVersionEditService/Create"
	AppVersionEditService_Update_FullMethodName = "/app_backend_api.appversion.v1.AppVersionEditService/Update"
	AppVersionEditService_Delete_FullMethodName = "/app_backend_api.appversion.v1.AppVersionEditService/Delete"
)

// AppVersionEditServiceClient is the client API for AppVersionEditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppVersionEditServiceClient interface {
	// 创建
	Create(ctx context.Context, in *AppVersionCreateRequest, opts ...grpc.CallOption) (*AppVersion, error)
	// 修改
	Update(ctx context.Context, in *AppVersionUpdateRequest, opts ...grpc.CallOption) (*AppVersion, error)
	// 删除
	Delete(ctx context.Context, in *AppVersionDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appVersionEditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppVersionEditServiceClient(cc grpc.ClientConnInterface) AppVersionEditServiceClient {
	return &appVersionEditServiceClient{cc}
}

func (c *appVersionEditServiceClient) Create(ctx context.Context, in *AppVersionCreateRequest, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, AppVersionEditService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionEditServiceClient) Update(ctx context.Context, in *AppVersionUpdateRequest, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, AppVersionEditService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionEditServiceClient) Delete(ctx context.Context, in *AppVersionDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppVersionEditService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppVersionEditServiceServer is the server API for AppVersionEditService service.
// All implementations should embed UnimplementedAppVersionEditServiceServer
// for forward compatibility
type AppVersionEditServiceServer interface {
	// 创建
	Create(context.Context, *AppVersionCreateRequest) (*AppVersion, error)
	// 修改
	Update(context.Context, *AppVersionUpdateRequest) (*AppVersion, error)
	// 删除
	Delete(context.Context, *AppVersionDeleteRequest) (*emptypb.Empty, error)
}

// UnimplementedAppVersionEditServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppVersionEditServiceServer struct {
}

func (UnimplementedAppVersionEditServiceServer) Create(context.Context, *AppVersionCreateRequest) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppVersionEditServiceServer) Update(context.Context, *AppVersionUpdateRequest) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppVersionEditServiceServer) Delete(context.Context, *AppVersionDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeAppVersionEditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppVersionEditServiceServer will
// result in compilation errors.
type UnsafeAppVersionEditServiceServer interface {
	mustEmbedUnimplementedAppVersionEditServiceServer()
}

func RegisterAppVersionEditServiceServer(s grpc.ServiceRegistrar, srv AppVersionEditServiceServer) {
	s.RegisterService(&AppVersionEditService_ServiceDesc, srv)
}

func _AppVersionEditService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionEditServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionEditService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionEditServiceServer).Create(ctx, req.(*AppVersionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionEditService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionEditServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionEditService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionEditServiceServer).Update(ctx, req.(*AppVersionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppVersionEditService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionEditServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionEditService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionEditServiceServer).Delete(ctx, req.(*AppVersionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppVersionEditService_ServiceDesc is the grpc.ServiceDesc for AppVersionEditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppVersionEditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.appversion.v1.AppVersionEditService",
	HandlerType: (*AppVersionEditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppVersionEditService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AppVersionEditService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppVersionEditService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/appversion/v1/edit.proto",
}
