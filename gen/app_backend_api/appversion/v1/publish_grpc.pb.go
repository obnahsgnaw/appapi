// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_backend_api/appversion/v1/publish.proto

package appversionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppVersionPublishService_Publish_FullMethodName = "/app_backend_api.appversion.v1.AppVersionPublishService/Publish"
)

// AppVersionPublishServiceClient is the client API for AppVersionPublishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppVersionPublishServiceClient interface {
	// 发布
	Publish(ctx context.Context, in *AppVersionPublishRequest, opts ...grpc.CallOption) (*AppVersion, error)
}

type appVersionPublishServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppVersionPublishServiceClient(cc grpc.ClientConnInterface) AppVersionPublishServiceClient {
	return &appVersionPublishServiceClient{cc}
}

func (c *appVersionPublishServiceClient) Publish(ctx context.Context, in *AppVersionPublishRequest, opts ...grpc.CallOption) (*AppVersion, error) {
	out := new(AppVersion)
	err := c.cc.Invoke(ctx, AppVersionPublishService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppVersionPublishServiceServer is the server API for AppVersionPublishService service.
// All implementations should embed UnimplementedAppVersionPublishServiceServer
// for forward compatibility
type AppVersionPublishServiceServer interface {
	// 发布
	Publish(context.Context, *AppVersionPublishRequest) (*AppVersion, error)
}

// UnimplementedAppVersionPublishServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppVersionPublishServiceServer struct {
}

func (UnimplementedAppVersionPublishServiceServer) Publish(context.Context, *AppVersionPublishRequest) (*AppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

// UnsafeAppVersionPublishServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppVersionPublishServiceServer will
// result in compilation errors.
type UnsafeAppVersionPublishServiceServer interface {
	mustEmbedUnimplementedAppVersionPublishServiceServer()
}

func RegisterAppVersionPublishServiceServer(s grpc.ServiceRegistrar, srv AppVersionPublishServiceServer) {
	s.RegisterService(&AppVersionPublishService_ServiceDesc, srv)
}

func _AppVersionPublishService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppVersionPublishServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppVersionPublishService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppVersionPublishServiceServer).Publish(ctx, req.(*AppVersionPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppVersionPublishService_ServiceDesc is the grpc.ServiceDesc for AppVersionPublishService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppVersionPublishService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_backend_api.appversion.v1.AppVersionPublishService",
	HandlerType: (*AppVersionPublishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _AppVersionPublishService_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_backend_api/appversion/v1/publish.proto",
}
