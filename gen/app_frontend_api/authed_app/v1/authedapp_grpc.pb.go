// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app_frontend_api/authed_app/v1/authedapp.proto

package authed_appv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthedAppService_ValidApp_FullMethodName = "/app_frontend_api.authed_app.v1.AuthedAppService/ValidApp"
)

// AuthedAppServiceClient is the client API for AuthedAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthedAppServiceClient interface {
	ValidApp(ctx context.Context, in *ValidAppRequest, opts ...grpc.CallOption) (*ValidAppResponse, error)
}

type authedAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthedAppServiceClient(cc grpc.ClientConnInterface) AuthedAppServiceClient {
	return &authedAppServiceClient{cc}
}

func (c *authedAppServiceClient) ValidApp(ctx context.Context, in *ValidAppRequest, opts ...grpc.CallOption) (*ValidAppResponse, error) {
	out := new(ValidAppResponse)
	err := c.cc.Invoke(ctx, AuthedAppService_ValidApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthedAppServiceServer is the server API for AuthedAppService service.
// All implementations should embed UnimplementedAuthedAppServiceServer
// for forward compatibility
type AuthedAppServiceServer interface {
	ValidApp(context.Context, *ValidAppRequest) (*ValidAppResponse, error)
}

// UnimplementedAuthedAppServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthedAppServiceServer struct {
}

func (UnimplementedAuthedAppServiceServer) ValidApp(context.Context, *ValidAppRequest) (*ValidAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidApp not implemented")
}

// UnsafeAuthedAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthedAppServiceServer will
// result in compilation errors.
type UnsafeAuthedAppServiceServer interface {
	mustEmbedUnimplementedAuthedAppServiceServer()
}

func RegisterAuthedAppServiceServer(s grpc.ServiceRegistrar, srv AuthedAppServiceServer) {
	s.RegisterService(&AuthedAppService_ServiceDesc, srv)
}

func _AuthedAppService_ValidApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthedAppServiceServer).ValidApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthedAppService_ValidApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthedAppServiceServer).ValidApp(ctx, req.(*ValidAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthedAppService_ServiceDesc is the grpc.ServiceDesc for AuthedAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthedAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app_frontend_api.authed_app.v1.AuthedAppService",
	HandlerType: (*AuthedAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidApp",
			Handler:    _AuthedAppService_ValidApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_frontend_api/authed_app/v1/authedapp.proto",
}
